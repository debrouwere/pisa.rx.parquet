#!/usr/local/bin/Rscript

library("tidyverse")
library("arrow")
library("parallel")
library("optparse")
library("cli")
library("mice")

# multithreaded parquet reads in a multithreaded script is asking for trouble
options(arrow.use_threads = FALSE)

SEED <- 1


#### Coverage ####

coverage <- read_csv('build/coverage.csv') |>
  select(-.by) |>
  pivot_longer(cols = -c(cycle, country, economy, region),
    names_to = 'variable',
    values_to = 'coverage')

#### Derived covariates ####

CYCLES <- c(2000, 2003, 2006, 2009, 2012, 2015, 2018, 2022)

DOMAINS <- CYCLES |>
  set_names(CYCLES) |>
  map(function(cycle) { c(
    "literacy",
    "math",
    "science"
)})

DOMAINS$`2000` <- c(
  "literacy",
  "math",
  "math_content_shape",
  "math_content_change",
  "science"
)

COVARIATES <- c(
  'grade_lead',
  'age',
  'sex',
  'immigrant_generation',
  'speaks_test_language_at_home',
  'mothers_isced',
  'fathers_isced',
  'highest_isei',
  'escs'
)

DERIVED_COVARIATES <- c(
  'grade_lag',
  'highest_isced',
  # we get a calibrated HISEI from official retrended PISA data,
  # so in a lot of cases we do have HISEI but not father's or mother's
  # ISEI, so for our purposes this isn't really a derived variable
  # 'highest_isei',
  'parental_education',
  'parental_education_by_country'
)

# paredint
isced_to_years <- read_csv('data/isced/2018-isced-to-years.csv') |>
  pivot_longer(starts_with('ISCED'), names_to='hisced', values_to='pared') |>
  group_by(hisced) |>
  summarize(parental_education = median(pared, na.rm = TRUE)) |>
  rename(highest_isced = hisced)

# pared
isced_to_years_by_area <- open_dataset('build/wide') |>
  filter(cycle == 2003) |>
  select(economy, region, highest_isced, parental_education_by_country) |>
  collect() |>
  group_by(economy, region, highest_isced) |>
  summarize(parental_education_by_country = median(parental_education_by_country, na.rm = TRUE)) |>
  ungroup()

#### Imputation ####

process_region <- function(observed, cycle, quality, verbose) {
  economy <- first(observed$economy)
  region <- first(observed$region)
  min_coverage <- quality / 100

  domains <- DOMAINS[[as.character(cycle)]]

  impute_covariate_cols <- coverage |>
    filter(cycle == {{ cycle }}, region == {{ region }}, coverage >= {{ min_coverage }}) |>
    pull(variable) |>
    intersect(COVARIATES)

  skipped_cols <- setdiff(COVARIATES, impute_covariate_cols)
  impute_cols <- c(domains, impute_covariate_cols)
  other_cols <- setdiff(colnames(observed), impute_cols)

  if (length(skipped_cols)) {
    skipped_cols_human <- str_flatten_comma(skipped_cols)
    pct_missing <- 100 - quality

    cli_alert_warning("skipping {skipped_cols_human} for {region}, {cycle} (more than {pct_missing}% is missing)")
  }

  # the long format dataset already contains 5 or 10 rows per student,
  # so even though m = 1 we actually get 5 or 10 imputations
  imputation <- mice(
    data = select(observed, all_of(impute_cols)),
    m = 1,
    seed = SEED,
    print = verbose)
  imputed <- complete(imputation, action = "stacked")

  # because we also impute math and science scores for PISA 2000,
  # we can now use the w_literacy weights for all cycles and domains
  all_cols <- colnames(observed) |>
    str_replace("^(w_math|w_science)", "w_literacy") |>
    str_replace("^(f_math|f_science)", "f_literacy") |>
    unique()


  # splice in the imputed columns
  imputed <- observed |>
    select(-any_of(colnames(imputed))) |>
    bind_cols(imputed)

  # cast back integers to logical when needed (mice converts these)
  imputed <- imputed |> mutate(
      speaks_test_language_at_home = as.logical(speaks_test_language_at_home)
    )

  # compute derived variables: grade_lag, highest_isced, parental_education
  # (paredint), parental_education_by_country (pared)
  imputed <- imputed |>
    select(-any_of(DERIVED_COVARIATES)) |>
    mutate(
      grade_lag = -grade_lead,
      highest_isced = pmax(mothers_isced, fathers_isced, na.rm = TRUE)) |>
    left_join(isced_to_years, by = 'highest_isced') |>
    left_join(isced_to_years_by_area, by = c('economy', 'region', 'highest_isced'))

  # revert to original column order
  # rename weights and fraction column
  imputed |>
    select(all_of(all_cols)) |>
    rename_with(\(name) str_replace(name, "w_literacy", "w")) |>
    rename(f = f_literacy)
}

process_country <- function(part, group, quality, verbose) {
  cli_alert_info("imputing {part$filename}")

  observed <- read_parquet(part$source)

  # `unique` maintains region ordering (which we want!), `group_by` does not;
  # `as.data.frame()` is necessary because a parquet dataset constructed from
  # a tibble faces a severe performance penalty
  regions <- unique(observed$region)
  ixs_by_region <- observed |> group_by(region) |> group_rows() |> set_names(sort(regions))
  imputed <- regions |>
    map(\(region) ixs_by_region[[region]]) |>
    map(function(ixs) process_region(observed[ixs, ], cycle = part$cycle, verbose = verbose, quality = 50)) |>
    bind_rows() |>
    as.data.frame()

  if (!dir.exists(dirname(part$destination))) dir.create(dirname(part$destination), recursive = TRUE)
  write_parquet(imputed, part$destination, compression = 'zstd', compression_level = 10)

  rm(observed, imputed)
}




#### CLI ####

main <- function(source, destination, nnodes, limit, quality, verbose, safe, help) {
  parts <- tibble(source = Sys.glob(file.path(source, '*/*/part-0.parquet'))) |>
    mutate(
      filename = str_sub(source, str_length({{ source }}) + 2),
      destination = file.path({{ destination }}, filename),
      cycle = as.integer(str_match(filename, 'cycle=(\\d+)/.+')[,2])
    )

  chunks <- list_transpose(as.list(parts), simplify = FALSE)

  if (limit > 0) chunks <- head(chunks, n = limit)
  process_country <- partial(process_country, quality = quality, verbose = verbose)
  if (safe) process_country <- safely(process_country)

  sink <- if (nnodes > 1) {
    cl <- makeForkCluster(nnodes = nnodes, outfile = "")
    parLapplyLB(
      cl = cl,
      X = chunks,
      fun = process_country
    )
  } else {
    lapply(
      X = chunks,
      FUN = process_country
    )
  }
}

parser <- OptionParser() |>
  add_option(c("-n", "--nnodes"), type="integer", default=2) |>
  add_option(c("-l", "--limit"), type="integer", default=0) |>
  add_option(c("-q", "--quality"), type="integer", default=50) |>
  add_option(c("-v", "--verbose"), action="store_true", default=FALSE) |>
  add_option(c("-s", "--safe"), action="store_true", default=FALSE)

args <- parse_args2(parser)
args$options$source <- args$args[1]
args$options$destination <- args$args[2]
do.call(main, args$options)
